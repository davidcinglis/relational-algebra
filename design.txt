PARSER
    The parser takes an input line of text and parses it into a series of plan nodes

    SELECT
        The select condition is parsed as a lambda with 2 arguments 
            (e.g. 'salary >= 100000' becomes:
                lambda x, y: x >= y
                arg1: "salary"
                arg2: 100000 )
        unary; single child node

    PROJECT
        Each project argument is parsed as a dictionary of lambdas and lists of arguments
            Usually, the lambda will take a single argument and just return that argument
            It is built this way to handle the generalized projection case, in which the lambda will operate on the arguments
        unary; single child node

    UNION/INTERSECTION/SET DIFFERENCE
        binary; two child nodes
        no other special parsing needed

    JOIN
        binary; two child nodes
        CROSS JOIN
            nothing special
        
        THETA JOIN
            cross join with conditions
            parse conditions like select conditions (2 arg lambda)

        NATURAL JOIN
            theta join with equality conditions on columns with the same name
            represent as a separate node type and let the executor sort out the column names

        OUTER JOINS
            natural join with total participation from one or both sides
            distinguish from natural join with argument to natural join node constructor (isLeftOuter, isRightOuter)

    RENAME
        parse new schema into a list of strings and pass that into the node constructor

    ASSIGNMENT
        pass name of new relation into node constructor

    DIVISION
        simple binary operator


PLAN NODE EXECUTION
    SELECT
        no schema change
        if arg is in schema, replace it with that column value for each tuple
        apply lambda to args, adding tuple to output for positive inputs

    PROJECT
        for each tuple:
            for each lambda in input dictionary:
                iterate through args and replace with column value if arg is in schema
                apply lambda to modified args, add result to output tuple
        schema becomes the values of the input dictionary (overwrite if 'as' keyword is used)

    UNION/INTERSECTION/SET DIFFERENCE
        no schema change
        probably an easy way to do these in python since tuples are stored as lists

    JOIN
        CROSS JOIN
            schema becomes concatenation of two input schemas
            generate with nested for loops

        THETA JOIN
            can model as cross join + select with some schema juggling
            schema becomes concatenation of two input schemas

        NATURAL JOIN
            iterate through input schemas and find columns with the same name
            generate conditions for these columns
            create theta join to evaluate
            delete 2nd instance of duplicate column from result

        OUTER JOIN
            can pre-process tuples with no counterpart, then perform a natural join on the remaining tuples

    RENAME
        create new relation, replace old schema with input schema
        tuples are unchanged

    DIVISION
        compare schemas to find common schema
        group by remaining attributes (set difference) and find matching values 


WY7ZwACJalClkk6